// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Task_Tracker_V4.Data;

#nullable disable

namespace Task_Tracker_V4.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20250919214157_TrySeedingDataTry1")]
    partial class TrySeedingDataTry1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Arabic_100_CI_AI")
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Task_Tracker_V4.Models.AbsenceRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__AbsenceR__3214EC0794E16F35");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("AbsenceRecords");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("Created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullNameAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullNameAR");

                    b.Property<string>("FullNameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullNameEN");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpiry")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.HasIndex(new[] { "Email" }, "UQ__Account__A9D10534CCE8DFA0")
                        .IsUnique();

                    b.HasIndex(new[] { "NationalId" }, "UQ__Account__E9AA32FA70EBBAC3")
                        .IsUnique();

                    b.ToTable("Account", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateOnly(2025, 9, 19),
                            Email = "superadmin@elsewedy.com",
                            FullNameAr = "مدير النظام",
                            FullNameEn = "Super Admin User",
                            IsActive = true,
                            NationalId = "29501011111111",
                            PasswordHash = "hashed_pass_sa",
                            Phone = "01012345678",
                            RoleId = 1L,
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateOnly(2025, 9, 19),
                            Email = "admin@elsewedy.com",
                            FullNameAr = "مسؤول النظام",
                            FullNameEn = "Admin User",
                            IsActive = true,
                            NationalId = "29602022222222",
                            PasswordHash = "hashed_pass_a",
                            Phone = "01123456789",
                            RoleId = 2L,
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateOnly(2025, 9, 19),
                            Email = "engineer1@elsewedy.com",
                            FullNameAr = "يارا ياسر",
                            FullNameEn = "Senior Engineer Yara Yasser",
                            IsActive = true,
                            NationalId = "29804043336666",
                            PasswordHash = "hashed_pass_e1",
                            Phone = "01068745438",
                            RoleId = 3L,
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateOnly(2025, 9, 19),
                            Email = "engineer2@elsewedy.com",
                            FullNameAr = "سارة عواد",
                            FullNameEn = "Sara Awad",
                            IsActive = true,
                            NationalId = "29804043337878",
                            PasswordHash = "hashed_pass_e2",
                            Phone = "01068145338",
                            RoleId = 4L,
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateOnly(2025, 9, 19),
                            Email = "teacher1@elsewedy.com",
                            FullNameAr = "رشا محمد",
                            FullNameEn = "Senior Rasha Mohamed",
                            IsActive = true,
                            NationalId = "29703033333333",
                            PasswordHash = "hashed_pass_t1",
                            Phone = "01234567890",
                            RoleId = 5L,
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateOnly(2025, 9, 19),
                            Email = "teacher2@elsewedy.com",
                            FullNameAr = "أحمد كامل",
                            FullNameEn = "Ahmed Kamel",
                            IsActive = true,
                            NationalId = "29703034444444",
                            PasswordHash = "hashed_pass_t2",
                            Phone = "01234567891",
                            RoleId = 6L,
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateOnly(2025, 9, 19),
                            Email = "reviewer1@elsewedy.com",
                            FullNameAr = "مقيم واحد",
                            FullNameEn = "Reviewer One",
                            IsActive = true,
                            NationalId = "29905057777777",
                            PasswordHash = "hashed_pass_r1",
                            Phone = "01155555555",
                            RoleId = 7L,
                            StatusId = 1L
                        });
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.AccountRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("AccountID");

                    b.Property<string>("BusinessEntityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("RoleID");

                    b.HasKey("Id")
                        .HasName("PK_AccountRoles_Account");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Achievement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.AdmissionProfile", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("ArabicInterviewScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("BirthCertificatePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("EnglishInterviewScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("EnglishScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<bool>("HasIcdllicense")
                        .HasColumnType("bit")
                        .HasColumnName("HasICDLLicense");

                    b.Property<bool>("HasLaptop")
                        .HasColumnType("bit");

                    b.Property<bool>("HasOnlineTrainingCourses")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAcceptanceLetterReceived")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MathInterviewScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal?>("MathScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("MinistryExamPercentage")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("ParentOccupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferencesSheetPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousSchoolType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("SoftwareInterviewScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuccessReportPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("ThirdPrepScore")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("TuitionFeeReceiptPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountId");

                    b.HasIndex("StatusId");

                    b.ToTable("AdmissionProfile", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.AdmissionQuizMath", b =>
                {
                    b.Property<string>("A")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("a");

                    b.Property<string>("Answer")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("B")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("b");

                    b.Property<string>("C")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("c");

                    b.Property<string>("CorrectAnswerTxt")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("CorrectAnswer_Txt");

                    b.Property<string>("D")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)")
                        .HasColumnName("d");

                    b.Property<string>("Question")
                        .HasMaxLength(4000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.ToTable("AdmissionQuiz_MATH", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.AttendanceRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsPresent")
                        .HasColumnType("bit");

                    b.Property<long?>("NoteId")
                        .HasColumnType("bigint");

                    b.Property<int>("SessionNumber")
                        .HasColumnType("int");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("PK__Attendan__3214EC0723E966C3");

                    b.HasIndex("NoteId");

                    b.HasIndex("StudentId");

                    b.ToTable("AttendanceRecords");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.BehaviorNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AttendanceRecordId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gen")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("gen");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NoteType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__Behavior__3214EC07452FA35F");

                    b.HasIndex("AttendanceRecordId");

                    b.ToTable("BehaviorNotes");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.CapstoneSupervisorExtension", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.HasKey("AccountId");

                    b.HasIndex("StatusId");

                    b.ToTable("CapstoneSupervisorExtension", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.EmailSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("SenderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SmtpPort")
                        .HasColumnType("int");

                    b.Property<string>("SmtpServer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpUsername")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailSettings");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.EmploymentRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmploymentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedInUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("EmploymentRequests");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.ExamDetail", b =>
                {
                    b.Property<long>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Exam_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ExamId"));

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExamDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Exam_Description");

                    b.Property<string>("ExamSubject")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Exam_Subject");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamId")
                        .HasName("PK__Exam_Det__C782CA79487C7372");

                    b.ToTable("Exam_Details", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.ExamQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Choice1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choice2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choice3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Choice4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SectionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ExamQuestion", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.ExamQuestionBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long?>("ExamId")
                        .HasColumnType("bigint")
                        .HasColumnName("Exam_ID");

                    b.Property<long?>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("Question_ID");

                    b.HasKey("Id")
                        .HasName("PK__Exam_Que__3214EC275A2735A7");

                    b.ToTable("Exam_QuestionBank", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.ExamQuestionMath", b =>
                {
                    b.Property<string>("CorrectAnswer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Correct Answer");

                    b.Property<string>("CorrectAnswerTxt")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CorrectAnswer_Txt");

                    b.Property<string>("OptionA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Option A");

                    b.Property<string>("OptionB")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Option B");

                    b.Property<string>("OptionC")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Option C");

                    b.Property<string>("OptionD")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Option D");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int")
                        .HasColumnName("SectionID");

                    b.ToTable("ExamQuestion_Math", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AdminAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("GradeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentGradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.HasKey("Id");

                    b.HasIndex("AdminAccountId");

                    b.HasIndex("StatusId");

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.InterviewScore", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("InterviewerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("InterviewerId");

                    b.ToTable("InterviewScore", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Login", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("StatusId");

                    b.ToTable("Login", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccountId = 1L,
                            Email = "superadmin@elsewedy.com",
                            PasswordHash = "hashed_pass_sa",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            AccountId = 2L,
                            Email = "admin@elsewedy.com",
                            PasswordHash = "hashed_pass_a",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 3L,
                            AccountId = 3L,
                            Email = "engineer1@elsewedy.com",
                            PasswordHash = "hashed_pass_e1",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 4L,
                            AccountId = 5L,
                            Email = "teacher1@elsewedy.com",
                            PasswordHash = "hashed_pass_t1",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 5L,
                            AccountId = 4L,
                            Email = "engineer2@elsewedy.com",
                            PasswordHash = "hashed_pass_e2",
                            StatusId = 1L
                        },
                        new
                        {
                            Id = 6L,
                            AccountId = 6L,
                            Email = "teacher2@elsewedy.com",
                            PasswordHash = "hashed_pass_t2",
                            StatusId = 1L
                        });
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ReadStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L)
                        .HasColumnName("Read_statusID");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__Notifica__3214EC278015B410");

                    b.HasIndex("AccountId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccountId = 1L,
                            CreatedAt = new DateTime(2025, 9, 19, 21, 41, 56, 282, DateTimeKind.Utc).AddTicks(5575),
                            Message = "System is running",
                            ReadStatusId = 1L,
                            Title = "System Start",
                            isActive = true
                        },
                        new
                        {
                            Id = 2L,
                            AccountId = 2L,
                            CreatedAt = new DateTime(2025, 9, 19, 21, 41, 56, 282, DateTimeKind.Utc).AddTicks(5581),
                            Message = "Welcome to the Elsewedy School System.",
                            ReadStatusId = 2L,
                            Title = "Welcome!",
                            isActive = true
                        },
                        new
                        {
                            Id = 3L,
                            AccountId = 3L,
                            CreatedAt = new DateTime(2025, 9, 19, 21, 41, 56, 282, DateTimeKind.Utc).AddTicks(5583),
                            Message = "SuperAdmin has assigned you the task: System Challange.",
                            ReadStatusId = 7L,
                            Title = "New Task Assigned",
                            isActive = true
                        },
                        new
                        {
                            Id = 4L,
                            AccountId = 1L,
                            CreatedAt = new DateTime(2025, 9, 19, 21, 41, 56, 282, DateTimeKind.Utc).AddTicks(5584),
                            Message = "Admin has completed the task: System Audit.",
                            ReadStatusId = 7L,
                            Title = "Task Completed",
                            isActive = true
                        },
                        new
                        {
                            Id = 5L,
                            AccountId = 5L,
                            CreatedAt = new DateTime(2025, 9, 19, 21, 41, 56, 282, DateTimeKind.Utc).AddTicks(5586),
                            Message = "Admin has assigned you the task: Prepare Lesson Plan.",
                            ReadStatusId = 7L,
                            Title = "New Task Assigned",
                            isActive = true
                        },
                        new
                        {
                            Id = 6L,
                            AccountId = 3L,
                            CreatedAt = new DateTime(2025, 9, 19, 21, 41, 56, 282, DateTimeKind.Utc).AddTicks(5647),
                            Message = "Admin has assigned you the task: Lab Equipment Setup.",
                            ReadStatusId = 7L,
                            Title = "New Task Assigned",
                            isActive = true
                        },
                        new
                        {
                            Id = 7L,
                            AccountId = 4L,
                            CreatedAt = new DateTime(2025, 9, 19, 21, 41, 56, 282, DateTimeKind.Utc).AddTicks(5649),
                            Message = "System Audit has been marked as Pending",
                            ReadStatusId = 6L,
                            Title = "Task Status Updated",
                            isActive = true
                        });
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("ELSEWEDY");

                    b.Property<DateTime>("DateOfCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NameAr")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NameAR");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NameEN");

                    b.Property<string>("ProjectDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<long>("SupervisorAccountId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupervisorAccountId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.QuestionBank", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Question_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionId"));

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Mark")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("OptionA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionG")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OptionH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionSubject")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Question_Subject");

                    b.Property<string>("QuestionTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Question_Title");

                    b.Property<int?>("UsedOptions")
                        .HasColumnType("int");

                    b.HasKey("QuestionId")
                        .HasName("PK__Question__B0B2E4C6902349E6");

                    b.ToTable("Question_Bank", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Report", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ReportMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewerId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reviewer_ID");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<DateTime>("SubmissionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long>("SubmitterAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubmitterAccountId");

                    b.ToTable("Report", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.ReportSpecialist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateReport")
                        .HasColumnType("datetime")
                        .HasColumnName("date_report");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecialistSignature")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__ReportSp__3214EC077E928D74");

                    b.HasIndex("StatusId");

                    b.ToTable("ReportSpecialist", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.ReviewerSupervisorExtension", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AssignedClassId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.HasKey("AccountId");

                    b.HasIndex("AssignedClassId");

                    b.HasIndex("StatusId");

                    b.ToTable("ReviewerSupervisorExtension", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessEntity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleName" }, "NonClusteredIndex-20250911-154853");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BusinessEntity = "General",
                            OrderNo = 1,
                            RoleName = "Super Admin"
                        },
                        new
                        {
                            Id = 2L,
                            BusinessEntity = "General",
                            OrderNo = 2,
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 3L,
                            BusinessEntity = "Task",
                            OrderNo = 3,
                            RoleName = "Senior Engineer"
                        },
                        new
                        {
                            Id = 4L,
                            BusinessEntity = "Task",
                            OrderNo = 4,
                            RoleName = "Engineer"
                        },
                        new
                        {
                            Id = 5L,
                            BusinessEntity = "Task",
                            OrderNo = 5,
                            RoleName = "Senior Teacher"
                        },
                        new
                        {
                            Id = 6L,
                            BusinessEntity = "Task",
                            OrderNo = 6,
                            RoleName = "Teacher"
                        },
                        new
                        {
                            Id = 7L,
                            BusinessEntity = "Task",
                            OrderNo = 7,
                            RoleName = "Reviewer"
                        },
                        new
                        {
                            Id = 8L,
                            BusinessEntity = "General",
                            OrderNo = 8,
                            RoleName = "Supervisor"
                        });
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Scholarship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScholarshipName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Scholarship", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Section", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SectionName" }, "UQ_Section_SectionName")
                        .IsUnique();

                    b.ToTable("Section", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("FromDate")
                        .HasColumnType("date");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SessionNo")
                        .HasColumnType("int");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<DateOnly?>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Sheet1", b =>
                {
                    b.Property<DateTime?>("F1")
                        .HasColumnType("datetime");

                    b.ToTable("Sheet1$", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Staff", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("CheckInMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CheckInTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStaff")
                        .HasColumnType("datetime");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Staff__3214EC079AEB1B59");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessEntity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BusinessEntity = "General",
                            OrderNo = 1,
                            StatusName = "Active"
                        },
                        new
                        {
                            Id = 2L,
                            BusinessEntity = "General",
                            OrderNo = 2,
                            StatusName = "InActive"
                        },
                        new
                        {
                            Id = 3L,
                            BusinessEntity = "Task",
                            OrderNo = 3,
                            StatusName = "Not Started"
                        },
                        new
                        {
                            Id = 4L,
                            BusinessEntity = "Task",
                            OrderNo = 4,
                            StatusName = "In Progress"
                        },
                        new
                        {
                            Id = 5L,
                            BusinessEntity = "Task",
                            OrderNo = 5,
                            StatusName = "Completed"
                        },
                        new
                        {
                            Id = 6L,
                            BusinessEntity = "Task",
                            OrderNo = 6,
                            StatusName = "Read"
                        },
                        new
                        {
                            Id = 7L,
                            BusinessEntity = "Task",
                            OrderNo = 7,
                            StatusName = "UnRead"
                        });
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.StudentExamAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChoosedAnswer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ExamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Score")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex(new[] { "AccountId", "ExamId" }, "UQ_StudentExamAnswer_AccountExam")
                        .IsUnique();

                    b.ToTable("StudentExamAnswer", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.StudentExamResult", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("ExamArabicScore")
                        .HasColumnType("int");

                    b.Property<int>("ExamEnglishScore")
                        .HasColumnType("int");

                    b.Property<int>("ExamMathScore")
                        .HasColumnType("int");

                    b.Property<int>("ExamSoftwareScore")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.ToTable("StudentExamResult", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.StudentExtension", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsLeader")
                        .HasColumnType("bit");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.HasKey("AccountId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StatusId");

                    b.ToTable("StudentExtension", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.StudentProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("BadNotesJson")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("DaysAbsent")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("GoodNotesJson")
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__StudentP__3214EC0762A3C91F");

                    b.ToTable("StudentProfile", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.StudentTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<long>("StudentAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentAccountId");

                    b.HasIndex("TaskId");

                    b.ToTable("StudentTask", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.SubordinateTicket", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<long?>("SubordinateAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SupervisorAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TicketTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("GradeId");

                    b.HasIndex("SessionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubordinateAccountId");

                    b.HasIndex("SupervisorAccountId");

                    b.HasIndex("TicketTypeId");

                    b.ToTable("SubordinateTicket", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.SuperAdminExtension", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.HasKey("AccountId");

                    b.HasIndex("StatusId");

                    b.ToTable("SuperAdminExtension", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TaskSubmission", b =>
                {
                    b.Property<long>("TaskSubmissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("TaskSubmission_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TaskSubmissionId"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Created_At")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Feedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Glink")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("GLink");

                    b.Property<long?>("GradeId")
                        .HasColumnType("bigint")
                        .HasColumnName("Grade_ID");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReviewerId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reviewer_ID");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L)
                        .HasColumnName("Status_ID");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("Task_ID");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("Team_ID");

                    b.Property<long>("TeamLeaderId")
                        .HasColumnType("bigint")
                        .HasColumnName("TeamLeader_ID");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("Updated_At")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("TaskSubmissionId")
                        .HasName("PK__TaskSubm__39F484D072E29E3A");

                    b.HasIndex("GradeId");

                    b.HasIndex("TaskId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamLeaderId");

                    b.ToTable("TaskSubmission", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TblClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.HasKey("Id")
                        .HasName("PK_Class");

                    b.HasIndex("GradeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tbl_Class", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TblTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AdminAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AssignedById")
                        .HasColumnType("bigint")
                        .HasColumnName("AssignedByID");

                    b.Property<long?>("AssignedToId")
                        .HasColumnType("bigint")
                        .HasColumnName("AssignedToID");

                    b.Property<int?>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("Class_Id");

                    b.Property<DateOnly?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<long?>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<DateTime>("TaskDeadline")
                        .HasColumnType("datetime");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int")
                        .HasColumnName("Team_Id");

                    b.Property<int?>("WeekNumber")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Task");

                    b.HasIndex("AdminAccountId");

                    b.HasIndex("GradeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tbl_Task", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AssignedById = 2L,
                            AssignedToId = 6L,
                            CreatedAt = new DateOnly(2025, 12, 1),
                            StatusId = 1L,
                            TaskDeadline = new DateTime(2025, 12, 1, 17, 0, 0, 0, DateTimeKind.Utc),
                            TaskDescription = "Design the database schema for the new system.",
                            TaskName = "Database Design Document"
                        },
                        new
                        {
                            Id = 2L,
                            AssignedById = 2L,
                            AssignedToId = 7L,
                            CreatedAt = new DateOnly(2025, 12, 15),
                            StatusId = 1L,
                            TaskDeadline = new DateTime(2025, 12, 15, 17, 0, 0, 0, DateTimeKind.Utc),
                            TaskDescription = "Create a UI prototype for the student dashboard.",
                            TaskName = "Front-end Prototype"
                        },
                        new
                        {
                            Id = 3L,
                            AssignedById = 1L,
                            AssignedToId = 2L,
                            CreatedAt = new DateOnly(2025, 12, 10),
                            StatusId = 1L,
                            TaskDeadline = new DateTime(2025, 12, 10, 17, 0, 0, 0, DateTimeKind.Utc),
                            TaskDescription = "Review all user accounts and permissions.",
                            TaskName = "System Audit"
                        },
                        new
                        {
                            Id = 4L,
                            AssignedById = 5L,
                            AssignedToId = 4L,
                            CreatedAt = new DateOnly(2025, 11, 20),
                            StatusId = 1L,
                            TaskDeadline = new DateTime(2025, 11, 20, 17, 0, 0, 0, DateTimeKind.Utc),
                            TaskDescription = "Create the lesson plan for the next semester.",
                            TaskName = "Prepare Lesson Plan"
                        },
                        new
                        {
                            Id = 5L,
                            AssignedById = 3L,
                            AssignedToId = 3L,
                            CreatedAt = new DateOnly(2025, 11, 25),
                            StatusId = 1L,
                            TaskDeadline = new DateTime(2025, 11, 25, 17, 0, 0, 0, DateTimeKind.Utc),
                            TaskDescription = "Install and configure lab equipment.",
                            TaskName = "Lab Equipment Setup"
                        });
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Team", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<long?>("SupervisorAccountId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TeamLeaderAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupervisorAccountId");

                    b.HasIndex("TeamLeaderAccountId");

                    b.ToTable("Team", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TeamMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeamMemberAccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("TeamMemberDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamMemberAccountId");

                    b.ToTable("TeamMember", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TicketType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BusinessEntity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderNo")
                        .HasColumnType("int");

                    b.Property<long>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(1L);

                    b.Property<string>("TicketTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("TicketType", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.VwAdmissionResult", b =>
                {
                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<decimal?>("InterviewersAvgScores")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Interviewers_AVG_Scores%");

                    b.Property<int?>("InterviewersCount")
                        .HasColumnType("int")
                        .HasColumnName("Interviewers_Count");

                    b.Property<string>("InterviewersScores")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<decimal?>("InterviewersSumScores")
                        .HasColumnType("decimal(38, 2)")
                        .HasColumnName("Interviewers_SUM_Scores");

                    b.Property<decimal>("MinistryExam")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("MinistryExam%");

                    b.Property<decimal?>("PrepFinal")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Prep_Final%");

                    b.Property<string>("PrepScores")
                        .IsRequired()
                        .HasMaxLength(104)
                        .IsUnicode(false)
                        .HasColumnType("varchar(104)")
                        .HasColumnName("Prep_Scores");

                    b.Property<decimal?>("ResultAdmission1")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("ResultAdmission1%");

                    b.Property<decimal?>("ResultAdmission2")
                        .HasColumnType("decimal(6, 2)")
                        .HasColumnName("ResultAdmission2%");

                    b.Property<int>("SchoolExamSectionCount")
                        .HasColumnType("int")
                        .HasColumnName("SchoolExamSection_Count");

                    b.Property<string>("SchoolExamSectionScores")
                        .IsRequired()
                        .HasMaxLength(125)
                        .IsUnicode(false)
                        .HasColumnType("varchar(125)");

                    b.Property<decimal?>("SchoolExamSectionScoresAvg")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("SchoolExamSection_Scores_AVG%");

                    b.Property<int?>("SchoolExamSectionSumScores")
                        .HasColumnType("int")
                        .HasColumnName("SchoolExamSection_SUM_Scores");

                    b.Property<string>("SocialId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("SocialID");

                    b.Property<string>("StudName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable((string)null);

                    b.ToView("VW_AdmissionResult", (string)null);
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.AbsenceRecord", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.TblClass", "Class")
                        .WithMany("AbsenceRecords")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_AbsenceRecords_Class");

                    b.HasOne("Task_Tracker_V4.Models.Account", "Student")
                        .WithMany("AbsenceRecords")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_AbsenceRecords_Account");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Account", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Roles");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("Accounts")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Account_Status");

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.AdmissionProfile", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "Account")
                        .WithOne("AdmissionProfile")
                        .HasForeignKey("Task_Tracker_V4.Models.AdmissionProfile", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AdmissionProfile_Account");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("AdmissionProfiles")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_AdmissionProfile_Status");

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.AttendanceRecord", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.BehaviorNote", "Note")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("NoteId")
                        .HasConstraintName("FK_AttendanceRecords_BehaviorNotes");

                    b.HasOne("Task_Tracker_V4.Models.Account", "Student")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_AttendanceRecords_Account");

                    b.Navigation("Note");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.BehaviorNote", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.AttendanceRecord", "AttendanceRecord")
                        .WithMany("BehaviorNotes")
                        .HasForeignKey("AttendanceRecordId")
                        .IsRequired()
                        .HasConstraintName("FK_BehaviorNotes_AttendanceRecords");

                    b.Navigation("AttendanceRecord");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.CapstoneSupervisorExtension", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "Account")
                        .WithOne("CapstoneSupervisorExtension")
                        .HasForeignKey("Task_Tracker_V4.Models.CapstoneSupervisorExtension", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_CapstoneSupervisorExtension_Account");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("CapstoneSupervisorExtensions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_CapstoneSupervisorExtension_Status");

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.EmploymentRequest", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("EmploymentRequests")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_EmploymentRequests_Status");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Grade", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "AdminAccount")
                        .WithMany("Grades")
                        .HasForeignKey("AdminAccountId")
                        .HasConstraintName("FK_Grade_AdminAccount");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("Grades")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Grade_Status");

                    b.Navigation("AdminAccount");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.InterviewScore", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "Account")
                        .WithMany("InterviewScoreAccounts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_InterviewScore_Student_Account");

                    b.HasOne("Task_Tracker_V4.Models.Account", "Interviewer")
                        .WithMany("InterviewScoreInterviewers")
                        .HasForeignKey("InterviewerId")
                        .IsRequired()
                        .HasConstraintName("FK_InterviewScore_Admin_Account");

                    b.Navigation("Account");

                    b.Navigation("Interviewer");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Login", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "Account")
                        .WithMany("Logins")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Login_Account");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("Logins")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Login_Status");

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Notification", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "Account")
                        .WithMany("Notifications")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Notifications_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Project", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Project_Status");

                    b.HasOne("Task_Tracker_V4.Models.Account", "SupervisorAccount")
                        .WithMany("Projects")
                        .HasForeignKey("SupervisorAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Project_SupervisorAccount");

                    b.Navigation("Status");

                    b.Navigation("SupervisorAccount");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Report", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("Reports")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Report_Status");

                    b.HasOne("Task_Tracker_V4.Models.Account", "SubmitterAccount")
                        .WithMany("Reports")
                        .HasForeignKey("SubmitterAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Report_SubmitterAccount");

                    b.Navigation("Status");

                    b.Navigation("SubmitterAccount");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.ReportSpecialist", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("ReportSpecialists")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ReportSpecialist_Status");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.ReviewerSupervisorExtension", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "Account")
                        .WithOne("ReviewerSupervisorExtension")
                        .HasForeignKey("Task_Tracker_V4.Models.ReviewerSupervisorExtension", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_ReviewerSupervisorExtension_Account");

                    b.HasOne("Task_Tracker_V4.Models.TblClass", "AssignedClass")
                        .WithMany("ReviewerSupervisorExtensions")
                        .HasForeignKey("AssignedClassId")
                        .HasConstraintName("FK_ReviewerSupervisorExtension_Class");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("ReviewerSupervisorExtensions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_ReviewerSupervisorExtension_Status");

                    b.Navigation("Account");

                    b.Navigation("AssignedClass");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Scholarship", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("Scholarships")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Scholarship_Status");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Session", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("Sessions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Session_Status");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.StudentExamAnswer", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "Account")
                        .WithMany("StudentExamAnswers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentExamAnswer_Account");

                    b.HasOne("Task_Tracker_V4.Models.ExamQuestion", "Exam")
                        .WithMany("StudentExamAnswers")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentExamAnswer_ExamQuestion");

                    b.Navigation("Account");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.StudentExamResult", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "Account")
                        .WithOne("StudentExamResult")
                        .HasForeignKey("Task_Tracker_V4.Models.StudentExamResult", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_StudentExamResult_Account");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.StudentExtension", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "Account")
                        .WithOne("StudentExtension")
                        .HasForeignKey("Task_Tracker_V4.Models.StudentExtension", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentExtension_Account");

                    b.HasOne("Task_Tracker_V4.Models.TblClass", "Class")
                        .WithMany("StudentExtensions")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_StudentExtension_Class");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("StudentExtensions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentExtension_Status");

                    b.Navigation("Account");

                    b.Navigation("Class");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.StudentTask", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("StudentTasks")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentTask_Status");

                    b.HasOne("Task_Tracker_V4.Models.Account", "StudentAccount")
                        .WithMany("StudentTasks")
                        .HasForeignKey("StudentAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentTask_StudentAccount");

                    b.HasOne("Task_Tracker_V4.Models.TblTask", "Task")
                        .WithMany("StudentTasks")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentTask_Task");

                    b.Navigation("Status");

                    b.Navigation("StudentAccount");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.SubordinateTicket", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.TblClass", "Class")
                        .WithMany("SubordinateTickets")
                        .HasForeignKey("ClassId")
                        .HasConstraintName("FK_SubordinateTicket_Class");

                    b.HasOne("Task_Tracker_V4.Models.Grade", "Grade")
                        .WithMany("SubordinateTickets")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_SubordinateTicket_Grade");

                    b.HasOne("Task_Tracker_V4.Models.Session", "Session")
                        .WithMany("SubordinateTickets")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_SubordinateTicket_Session");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("SubordinateTickets")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_SubordinateTicket_Status");

                    b.HasOne("Task_Tracker_V4.Models.Account", "SubordinateAccount")
                        .WithMany("SubordinateTicketSubordinateAccounts")
                        .HasForeignKey("SubordinateAccountId")
                        .HasConstraintName("FK_SubordinateTicket_SubordinateAccount");

                    b.HasOne("Task_Tracker_V4.Models.Account", "SupervisorAccount")
                        .WithMany("SubordinateTicketSupervisorAccounts")
                        .HasForeignKey("SupervisorAccountId")
                        .HasConstraintName("FK_SubordinateTicket_SupervisorAccount");

                    b.HasOne("Task_Tracker_V4.Models.TicketType", "TicketType")
                        .WithMany("SubordinateTickets")
                        .HasForeignKey("TicketTypeId")
                        .HasConstraintName("FK_SubordinateTicket_TicketType");

                    b.Navigation("Class");

                    b.Navigation("Grade");

                    b.Navigation("Session");

                    b.Navigation("Status");

                    b.Navigation("SubordinateAccount");

                    b.Navigation("SupervisorAccount");

                    b.Navigation("TicketType");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.SuperAdminExtension", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "Account")
                        .WithOne("SuperAdminExtension")
                        .HasForeignKey("Task_Tracker_V4.Models.SuperAdminExtension", "AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_SuperAdminExtension_Account");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("SuperAdminExtensions")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_SuperAdminExtension_Status");

                    b.Navigation("Account");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TaskSubmission", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Grade", "Grade")
                        .WithMany("TaskSubmissions")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_TaskSubmission_Grade");

                    b.HasOne("Task_Tracker_V4.Models.TblTask", "Task")
                        .WithMany("TaskSubmissions")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskSubmission_Task");

                    b.HasOne("Task_Tracker_V4.Models.Team", "Team")
                        .WithMany("TaskSubmissions")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskSubmission_Team");

                    b.HasOne("Task_Tracker_V4.Models.Account", "TeamLeader")
                        .WithMany("TaskSubmissions")
                        .HasForeignKey("TeamLeaderId")
                        .IsRequired()
                        .HasConstraintName("FK_TaskSubmission_TeamLeader");

                    b.Navigation("Grade");

                    b.Navigation("Task");

                    b.Navigation("Team");

                    b.Navigation("TeamLeader");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TblClass", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Grade", "Grade")
                        .WithMany("TblClasses")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_Class_Grade");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("TblClasses")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Class_Status");

                    b.Navigation("Grade");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TblTask", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Account", "AdminAccount")
                        .WithMany("TblTasks")
                        .HasForeignKey("AdminAccountId")
                        .HasConstraintName("FK_Task_AdminAccount");

                    b.HasOne("Task_Tracker_V4.Models.Grade", "Grade")
                        .WithMany("TblTasks")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_Task_Grade");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("TblTasks")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Task_Status");

                    b.Navigation("AdminAccount");

                    b.Navigation("Grade");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Team", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.TblClass", "Class")
                        .WithMany("Teams")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Team_Class");

                    b.HasOne("Task_Tracker_V4.Models.Project", "Project")
                        .WithMany("Teams")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK_Team_Project");

                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("Teams")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Team_Status");

                    b.HasOne("Task_Tracker_V4.Models.Account", "SupervisorAccount")
                        .WithMany("TeamSupervisorAccounts")
                        .HasForeignKey("SupervisorAccountId")
                        .HasConstraintName("FK_Team_SupervisorAccount");

                    b.HasOne("Task_Tracker_V4.Models.Account", "TeamLeaderAccount")
                        .WithMany("TeamTeamLeaderAccounts")
                        .HasForeignKey("TeamLeaderAccountId")
                        .HasConstraintName("FK_Team_TeamLeaderAccount");

                    b.Navigation("Class");

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("SupervisorAccount");

                    b.Navigation("TeamLeaderAccount");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TeamMember", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("TeamMembers")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamMember_Status");

                    b.HasOne("Task_Tracker_V4.Models.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamMember_Team");

                    b.HasOne("Task_Tracker_V4.Models.Account", "TeamMemberAccount")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamMemberAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_TeamMember_TeamMemberAccount");

                    b.Navigation("Status");

                    b.Navigation("Team");

                    b.Navigation("TeamMemberAccount");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TicketType", b =>
                {
                    b.HasOne("Task_Tracker_V4.Models.Status", "Status")
                        .WithMany("TicketTypes")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_TicketType_Status");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Account", b =>
                {
                    b.Navigation("AbsenceRecords");

                    b.Navigation("AdmissionProfile");

                    b.Navigation("AttendanceRecords");

                    b.Navigation("CapstoneSupervisorExtension");

                    b.Navigation("Grades");

                    b.Navigation("InterviewScoreAccounts");

                    b.Navigation("InterviewScoreInterviewers");

                    b.Navigation("Logins");

                    b.Navigation("Notifications");

                    b.Navigation("Projects");

                    b.Navigation("Reports");

                    b.Navigation("ReviewerSupervisorExtension");

                    b.Navigation("StudentExamAnswers");

                    b.Navigation("StudentExamResult");

                    b.Navigation("StudentExtension");

                    b.Navigation("StudentTasks");

                    b.Navigation("SubordinateTicketSubordinateAccounts");

                    b.Navigation("SubordinateTicketSupervisorAccounts");

                    b.Navigation("SuperAdminExtension");

                    b.Navigation("TaskSubmissions");

                    b.Navigation("TblTasks");

                    b.Navigation("TeamMembers");

                    b.Navigation("TeamSupervisorAccounts");

                    b.Navigation("TeamTeamLeaderAccounts");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.AttendanceRecord", b =>
                {
                    b.Navigation("BehaviorNotes");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.BehaviorNote", b =>
                {
                    b.Navigation("AttendanceRecords");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.ExamQuestion", b =>
                {
                    b.Navigation("StudentExamAnswers");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Grade", b =>
                {
                    b.Navigation("SubordinateTickets");

                    b.Navigation("TaskSubmissions");

                    b.Navigation("TblClasses");

                    b.Navigation("TblTasks");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Project", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Session", b =>
                {
                    b.Navigation("SubordinateTickets");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Status", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("AdmissionProfiles");

                    b.Navigation("CapstoneSupervisorExtensions");

                    b.Navigation("EmploymentRequests");

                    b.Navigation("Grades");

                    b.Navigation("Logins");

                    b.Navigation("Projects");

                    b.Navigation("ReportSpecialists");

                    b.Navigation("Reports");

                    b.Navigation("ReviewerSupervisorExtensions");

                    b.Navigation("Scholarships");

                    b.Navigation("Sessions");

                    b.Navigation("StudentExtensions");

                    b.Navigation("StudentTasks");

                    b.Navigation("SubordinateTickets");

                    b.Navigation("SuperAdminExtensions");

                    b.Navigation("TblClasses");

                    b.Navigation("TblTasks");

                    b.Navigation("TeamMembers");

                    b.Navigation("Teams");

                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TblClass", b =>
                {
                    b.Navigation("AbsenceRecords");

                    b.Navigation("ReviewerSupervisorExtensions");

                    b.Navigation("StudentExtensions");

                    b.Navigation("SubordinateTickets");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TblTask", b =>
                {
                    b.Navigation("StudentTasks");

                    b.Navigation("TaskSubmissions");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.Team", b =>
                {
                    b.Navigation("TaskSubmissions");

                    b.Navigation("TeamMembers");
                });

            modelBuilder.Entity("Task_Tracker_V4.Models.TicketType", b =>
                {
                    b.Navigation("SubordinateTickets");
                });
#pragma warning restore 612, 618
        }
    }
}
